import streamlit as st
import matplotlib.pyplot as plt
from PIL import Image

# =============================
# TITRE ET INTRODUCTION
# =============================
st.set_page_config(page_title="Rapport CNN - Classification de Tumeurs C√©r√©brales", layout="wide")
st.title("üß† Rapport explicatif - Classification de tumeurs c√©r√©brales avec CNN")
st.write("""
Ce rapport pr√©sente les √©tapes principales du projet de **d√©tection de tumeurs c√©r√©brales** √† l'aide d'un **r√©seau de neurones convolutif (CNN)**.
L'objectif √©tait de classifier les images IRM en quatre cat√©gories :
- **Notumor**
- **Glioma**
- **Meningioma**
- **Pituitary**
""")

# =============================
# 1. PR√âTRAITEMENT DES DONN√âES
# =============================
st.header("1Ô∏è‚É£ Pr√©traitement des donn√©es")
st.write("""
- Les images ont √©t√© charg√©es depuis les 4 dossiers (`Data/notumor`, `Data/glioma`, `Data/meningioma`, `Data/pituitary`).
- Chaque image a √©t√© redimensionn√©e √† **224√ó224 pixels**.
- Les √©tiquettes num√©riques ont √©t√© associ√©es aux classes correspondantes.
""")

try:
    img_nb = Image.open("rapport/nombre_images_par_classe.png")
    st.image(img_nb, caption="Distribution initiale des images par classe", width=600)
except FileNotFoundError:
    st.warning("Image non trouv√©e : nombre_images_par_classe.png")

st.write("""
Ensuite, une **visualisation d'un √©chantillon d'images** a permis de v√©rifier la qualit√© et la vari√©t√© du dataset.
""")

try:
    img_ex = Image.open("rapport/echantillon_classes.png")
    st.image(img_ex, caption="√âchantillon d'images par classe", width=800)
except FileNotFoundError:
    st.warning("Image non trouv√©e : echantillon_classes.png")

# =============================
# 2. AUGMENTATION DES DONN√âES
# =============================
st.header("2Ô∏è‚É£ Data Augmentation")
st.write("""
Pour √©viter le d√©s√©quilibre entre les classes, une **augmentation de donn√©es** a √©t√© appliqu√©e :
- Rotation, zoom, d√©calage, cisaillement, flip horizontal.
- Objectif : atteindre **2000 images par classe**.
""")

try:
    img_aug = Image.open("rapport/nombre_images_apres_augmentation.png")
    st.image(img_aug, caption="Distribution apr√®s augmentation", width=600)
except FileNotFoundError:
    st.warning("Image non trouv√©e : nombre_images_apres_augmentation.png")

# =============================
# 3. CONSTRUCTION DU MOD√àLE CNN
# =============================
st.header("3Ô∏è‚É£ Construction du mod√®le CNN")
st.write("""
Le mod√®le contient :
- **3 couches Convolution + MaxPooling**
- **2 Dropout** pour √©viter l'overfitting
- **1 couche Dense cach√©e (128 neurones)** avec activation ReLU
- **1 couche de sortie Softmax (4 classes)**

Optimiseur : **Adam** (learning_rate = 0.01)  
Fonction de perte : **categorical_crossentropy**
""")

try:
    img_arch = Image.open("rapport/cnn_architecture.png")
    st.image(img_arch, caption="Architecture du CNN", width=700)
except FileNotFoundError:
    st.warning("Image non trouv√©e : cnn_architecture.png")

# =============================
# 4. ENTRA√éNEMENT DU MOD√àLE
# =============================
st.header("4Ô∏è‚É£ Entra√Ænement du mod√®le")
st.write("""
- **80%** des donn√©es utilis√©es pour l'entra√Ænement, **20%** pour le test.
- Utilisation de **EarlyStopping** et **ModelCheckpoint**.
- Entra√Ænement sur **35 epochs**, batch size = 64.
""")

col1, col2 = st.columns(2)
with col1:
    try:
        st.image("rapport/courbe_accuracy.png", caption="Accuracy au fil des √©poques", width=400)
    except FileNotFoundError:
        st.warning("Image non trouv√©e : courbe_accuracy.png")

with col2:
    try:
        st.image("rapport/courbe_loss.png", caption="Loss au fil des √©poques", width=400)
    except FileNotFoundError:
        st.warning("Image non trouv√©e : courbe_loss.png")

st.write("""
> Ces courbes montrent la convergence du mod√®le et la bonne g√©n√©ralisation sur le jeu de validation.
""")

# =============================
# 5. √âVALUATION ET R√âSULTATS
# =============================
st.header("5Ô∏è‚É£ √âvaluation du mod√®le")

st.write("""
Les performances finales sur le jeu de test :
- **Accuracy** ‚âà `0.9206249713897705`
- **Loss** ‚âà `0.2861359417438507`

Les **matrices de confusion** par classe permettent d'√©valuer les erreurs de classification.
""")

# Affichage des matrices de confusion en 2x2
cols = st.columns(2)
images_matrices = [
    ("rapport/matrice_confusion_glioma.png", "Classe : Glioma"),
    ("rapport/matrice_confusion_meningioma.png", "Classe : Meningioma"),
    ("rapport/matrice_confusion_pituitary.png", "Classe : Pituitary"),
    ("rapport/matrice_confusion_notumor.png", "Classe : Notumor"),
]

for idx, (img_path, caption) in enumerate(images_matrices):
    col = cols[idx % 2]
    try:
        img = Image.open(img_path)
        col.image(img, caption=caption, width=350)
    except FileNotFoundError:
        col.warning(f"Image non trouv√©e : {img_path}")

# =============================
# 6. EXEMPLES DE PR√âDICTIONS
# =============================
st.header("6Ô∏è‚É£ Exemples de pr√©dictions")

col1, col2 = st.columns(2)
with col1:
    try:
        st.image("rapport/predictions_correctes.png", caption="Exemples de pr√©dictions correctes", width=450)
    except FileNotFoundError:
        st.warning("Image non trouv√©e : predictions_correctes.png")

with col2:
    try:
        st.image("rapport/predictions_incorrectes.png", caption="Exemples de pr√©dictions incorrectes", width=450)
    except FileNotFoundError:
        st.warning("Image non trouv√©e : predictions_incorrectes.png")

st.write("""
Ces exemples permettent d'analyser les r√©ussites et les confusions du mod√®le.
""")

# =============================
# 7. CONCLUSION
# =============================
st.header("‚úÖ Conclusion")
st.write("""
Le mod√®le CNN a permis d'obtenir de bons r√©sultats pour la classification des tumeurs c√©r√©brales √† partir d'IRM.
Gr√¢ce √† la **data augmentation** et √† la **r√©gularisation (Dropout)**, le surapprentissage a √©t√© limit√©.

üîπ **Forces :**
- Bonne g√©n√©ralisation
- Pr√©cision correcte
- Structure CNN simple et efficace

üîπ **Axes d'am√©lioration :**
- Tester un mod√®le pr√©-entra√Æn√© (Transfer Learning)
- Ajuster le taux d'apprentissage
- Ajouter une meilleure gestion du d√©s√©quilibre

---
üë©‚Äçüíª R√©alis√© par : **Abir Meskini**
""")